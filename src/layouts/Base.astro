---
import { SEO } from 'astro-seo';
import '@/styles/global.css';
import Navbar from '@/components/Navbar.astro';
import Footer from '@/components/Footer.astro';
import { regionTags, useTranslations, type LanguageKey, languageTags, defaultLocale, prefixDefaultLocale } from '@/i18n/i18n.ts';
import { favicons, globalOgImage } from '@/utility/config.ts';

const t = useTranslations(Astro.currentLocale as LanguageKey);

interface Props {
  title?: string;
  description?: string;
}

const { title, description } = Astro.props;

const globalTitle = `${title || t('Head-1')} - ${t('Head-2')}`;
const globalDescription = `${
  description || t('Head-3')
}`;
const globalOgImageAlt = t('Head-4');
const currentLocale = Astro.currentLocale as LanguageKey;

function getPathnameWithoutLocale(pathname: string) {
  return pathname.replace(`/${Astro.currentLocale}`, '').replace(/\/?$/, '/');
}
---

<!DOCTYPE html>
<html class="font-sans-serif text-primary-900 selection:bg-accent/40 selection:text-black" lang={languageTags[currentLocale]}>
  <head>
    <SEO
    charset="UTF-8"
    title={globalTitle}
    description={globalDescription}
    openGraph={{
      basic: {
        title: `${globalTitle}`,
        type: 'website',
        image: `${globalOgImage.url}`,
      },
      image: {
        type: `${globalOgImage.type}`,
        alt: `${globalOgImageAlt}`,
        height: 630,
        width: 1200,
      },
    }}
    twitter={{
      title: `${globalTitle}`,
      description: `${globalDescription}`,
      image: `${globalOgImage.url}`,
      imageAlt: `${globalOgImageAlt}`,
    }}
    extend={{
      link: [
        { rel: 'manifest', href: '/manifest.webmanifest' },
          // Default Language Alternates
          {
            rel: "alternate",
            hreflang: "x-default",
            href: new URL(
              defaultLocale + 
            getPathnameWithoutLocale(Astro.url.pathname) ,
              Astro.site
            ).toString()
          },

          // Language Alternates - Region
          ...(Object.keys(regionTags) as Array<keyof typeof regionTags>).map(tag => {
            const regionMap = {
              zh: 'zh-tw' 
            }
            return ({
            rel: "alternate",
            hreflang: tag,
            href: new URL(regionMap[tag] + getPathnameWithoutLocale(Astro.url.pathname),
              Astro.site
            ).toString()
          })}),

          // Language Alternates - Countries
          ...Object.keys(languageTags).map(tag => ({
            rel: "alternate",
            hreflang: tag,
            href: new URL(prefixDefaultLocale 
                ? tag + getPathnameWithoutLocale(Astro.url.pathname) 
                : Astro.url.pathname,
              Astro.site
            ).toString()
          })),
        
      ],
      meta: [
        {
          name: 'viewport',
          content: 'width=device-width, initial-scale=1',
        },
      ],
    }}
  />
    <link rel="apple-touch-icon" sizes="180x180" href={favicons['apple-touch-icon']}/>
    <link rel="icon" type="image/png" sizes="32x32" href={favicons['32']} />
    <link rel="icon" type="image/png" sizes="16x16" href={favicons['16']} />
  </head>
  <body
    class="print:bg-[url('')] bg-[url('/assets/global/natural-paper.webp')] bg-fixed"
    style='background-color: #f5f5f5;'
  >
    <Navbar />
    <div style="margin-top: calc(var(--navbar-height) * -1);">
      <slot />
    </div>
    <Footer />
  </body>
</html>

<style is:inline>
  @media print {
    .no-print, .no-print * {
        display: none !important;
    }
  }
</style>
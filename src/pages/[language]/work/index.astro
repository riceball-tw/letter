---
import { getCollection } from 'astro:content';
import Base from '@/layouts/Base.astro';
import Banner from '@/components/Banner.astro';
import { Icon } from 'astro-icon/components';

import { languages, useTranslations, type LanguageKey } from '@/i18n/i18n.ts';
import type { AllowedTechsEnum } from '@/types/collections'

const currentLocale = Astro.currentLocale as LanguageKey;
const t = useTranslations(currentLocale);

const publicCurrentLangProjects = await getCollection('project', (project) => {
  const isPublicProject = !project.data.draft 
  const isCurrentLangProject = project.id.startsWith(currentLocale)
  return isPublicProject && isCurrentLangProject
});
const sortedProjects = publicCurrentLangProjects.sort((a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime());
const allProjectTechs = publicCurrentLangProjects.reduce<AllowedTechsEnum[]>((acc, curr) => {
  const techs = curr.data?.tech || []
  return [...new Set([...acc, ...techs])]
}, []).sort((a, b) => a.localeCompare(b))

type TechGroupIds = 'Work-TechGroup-Vue' | 'Work-TechGroup-React' | 'Work-TechGroup-Testing' | 'Work-TechGroup-Database' | 'Work-TechGroup-UserInterface';

type TechGroup = {
  id: TechGroupIds,
  relatedTechs: AllowedTechsEnum[],
  icon: string,
  themeColor: string,
} 


const allTechGroups = [
{
  id: 'Work-TechGroup-UserInterface',
  relatedTechs: ['Bootstrap', 'Chart.js', 'Daisy UI', 'Framer Motion', 'GSAP', 'Shadcn UI'],
  icon: 'material-symbols:layers-outline-rounded',
  themeColor: '#5c038f',
},  
{
  id: 'Work-TechGroup-Vue',
  relatedTechs: ['Nuxt(Vue)', 'Pinia', 'Vue', 'Vue Router'],
  icon: 'mdi:vuejs',
  themeColor: '#33a06f',
}, {
  id: 'Work-TechGroup-React',
  relatedTechs: ['Next(React)', 'React', 'React Router'],
  icon: 'mdi:react',
  themeColor: '#087ea4',
}, {
  id: 'Work-TechGroup-Testing',
  relatedTechs: ['Playwright', 'Vitest', 'Cypress', 'Lighthouse CI'],
  icon: 'material-symbols:thermostat-rounded',
  themeColor: '#608f03',
}, {
  id: 'Work-TechGroup-Database',
  relatedTechs: ['Supabase(Postgres)', 'MySQL', 'Drizzle ORM'],
  icon: 'material-symbols:database-outline',
  themeColor: '#03118f',
},
] satisfies TechGroup[]

export function getStaticPaths() {
  return Object.keys(languages).map((language) => ({
    params: { language },
  }));
}
---

<style is:inline>
  .active[data-group-id] {
    background-color: var(--themeColor);
  }

  [data-group-id]:hover {
    color: var(--themeColor);
  }

  .active[data-group-id]:hover {
    color: white;
  }

  [data-group-id]:hover [data-group-icon] {
    color: var(--themeColor);
  }

  .active[data-group-id]:hover [data-group-icon] {
    color: currentColor;
  }

  .active {
    background-color: var(--color-primary-900);
    color: var(--color-primary-50);
    border-color: transparent
  }
</style>

<script is:inline define:vars={{
  allTechGroups
}}>
document.addEventListener("astro:page-load", pageLoadEvent => {
  const isOnWorkPage = pageLoadEvent.target.location.pathname.includes('work') 
  if (!isOnWorkPage) return

  let activedTechs = []
  const groupFilterElement = document.querySelector('[data-group-filter]')
  const filterElement = document.querySelector('[data-filter]')
  const worksElement = document.querySelector('[data-works]')

  function updateTechList() {
    // Update filter buttons
    filterElement?.querySelectorAll('button').forEach(button => {
      if (activedTechs.includes(button.innerText)) {
        button.classList.add('active')
      } else {
        button.classList.remove('active')
      }
    })

    // Update group filter buttons
    groupFilterElement?.querySelectorAll('button').forEach(button => {
      const techId = button.dataset['groupId']
      const relatedTechs = allTechGroups.find(group => group.id === techId)?.relatedTechs || []
      const isActive = relatedTechs.every(tech => activedTechs.includes(tech))
      if (isActive) {
        button.classList.add('active')
      } else {
        button.classList.remove('active')
      }
    })

    // Update card
    worksElement?.querySelectorAll('[data-tech]').forEach(work => {
      const workTechs = (work).dataset.tech?.split(",") || []

      if (activedTechs.length === 0) {
        work.classList.remove('hidden')
        return
      }

      if (activedTechs.some(tech => workTechs.includes(tech))) {
        work.classList.remove('hidden')
      } else {
        work.classList.add('hidden')
      }
    })
  }

  filterElement?.addEventListener('click', (e) => {
    if (!e.target) return
    const targetElement = e.target

    if (targetElement.tagName === 'BUTTON') {
      const tech = targetElement.innerText
      const techIndex = activedTechs.indexOf(tech)
      const isIndexExist = techIndex > -1
      if (isIndexExist) {
        activedTechs.splice(techIndex, 1)
      } else {
        activedTechs.push(tech)
      }

      updateTechList()
    }
  })

  groupFilterElement?.addEventListener('click', e => {
    if (!e.target) return
    const targetElement = e.target

    console.log(targetElement.tagName)

    if (targetElement.tagName === 'BUTTON') {
      const techId = targetElement.dataset['groupId']
      const relatedTechs = allTechGroups.find(group => group.id === techId)?.relatedTechs || []
      
      activedTechs = [...relatedTechs]

      updateTechList()
    }
  })


});

</script>

<Base title={t('Navbar-3')}>
  <div class="p-4 md:p-8">
    <main class="min-h-screen">
      <Banner>
        <h1 class="text-3xl md:text-5xl font-medium">{t('Work-1')}<br />{t('Work-2')}</h1>
      </Banner>

      <section class="container mx-auto flex flex-col gap-16">
        <h2 class="sr-only">{t('Work-3', {number: `${publicCurrentLangProjects.length}`})}</h2>

        <ul class="flex flex-wrap gap-2" data-group-filter>
          {
            allTechGroups.map(techGroup => {

              return <li>
                <button data-group-id={techGroup.id} style={
                  `--themeColor: ${techGroup.themeColor};`
                } class="hover:border-(--themeColor)/60 hover:bg-(--themeColor)/10 cursor-pointer border-2 py-1 md:py-2 px-3 md:px-4 border-primary-50 rounded-full text-md inline-flex items-center gap-4 transition" type="button">
                  <Icon class="pointer-events-none size-8 md:size-10" data-group-icon size={32} name={techGroup.icon} />
                  { t(techGroup.id) }
                </button>
              </li>
            })
          }
        </ul>

          <ul class="flex flex-wrap gap-2" data-filter>
            {
              allProjectTechs.map(tech => <li>
              <button class="cursor-pointer border-2 py-1 md:py-2 px-2 md:px-4 border-primary-50 rounded-full text-xs lg:text-sm" type="button">
                { tech }
              </button>
            </li>)
            }
          </ul>

        <ul data-works class="grid md:grid-cols-2 grid-cols-1 gap-8">
          {
            sortedProjects.map((project, index) => {
              const imagesInsideView = 2;
              return (
                <li data-tech={project.data.tech} class="relative overflow-hidden flex flex-col gap-4">
                  {
                    project.data.isWorkInProgress && (
                      <div class="absolute top-0 right-0 z-(--z-index-work-ribbon)">
                        <div class="w-32 h-8 absolute top-4 -right-8">
                          <div class="h-full w-full text-primary-800 bg-accent tracking-widest text-center text-current leading-8 font-semibold transform rotate-45">{t('Work-4')}</div>
                        </div>
                      </div>
                    )
                  }  
                  <div style="--thumbnailWidth: 720px; --thumbnailHeight: 540px;" class="relative max-w-(--thumbnailWidth) max-h-(--thumbnailHeight) before:animate-pulse before:bg-primary-100 before:border-transparent before:inset-0 before:absolute before:rounded-lg">
                    {(() => {
                      if (project.data.video) {
                        return (
                          <video
                            style="aspect-ratio: 4 / 3;"
                            class="rounded-lg z-(--z-index-work-thumbnail) relative"
                            width="720"
                            height="540"
                            autoplay
                            loop
                            muted
                            playsinline
                            poster={project.data?.thumbnail?.src || ''}
                          >
                            {project.data.video.map((source) => (
                              <source src={source.src} type={source.type} />
                            ))}
                          </video>
                        );
                      } if (project.data?.thumbnail?.src) {
                        return (
                          <img
                            loading={index >= imagesInsideView ? 'lazy' : 'eager'}
                            class="w-full rounded-lg z-(--z-index-work-thumbnail) relative"
                            width="720"
                            height="540"
                            src={project.data.thumbnail.src}
                            alt={project.data.thumbnail.alt}
                          />
                        );
                      } 
                        return (
                          <div 
                            style="aspect-ratio: 4 / 3;" 
                            class="w-full text-center bg-primary-100 text-primary-600 flex justify-center items-center z-(--z-index-work-thumbnail) relative text-4xl font-bold"
                          >
                            {project.data.title}
                          </div>
                        );
                      
                    })()}
                  </div>

                  <h3 class="text-lg font-medium">
                    {project.data?.link?.url ? (
                      <a href={project.data.link.url}>{project.data.title}</a>
                    ) : (
                      <span>{ project.data.title }</span>
                    )}

                    <time class="opacity-60"> - {project.data.publishDate.getFullYear()}</time>
                  </h3>

                  <p class="text-lg mb-4">{project.data.description}</p>

                  <div class="flex flex-wrap items-center justify-between gap-4">
                    {project.data.tech && (
                      <ul class="flex flex-wrap gap-2 xl:w-1/2 w-auto">
                        {project.data.tech.map((tech) => (
                          <li class="border-2 py-1 md:py-2 px-2 md:px-4 border-primary-50 rounded-full text-xs lg:text-sm">
                            {tech}
                          </li>
                        ))}
                      </ul>
                    )}

                    {project.data.link && (
                      <ul class="flex gap-4 ">
                        {project.data.link.sourceCodeUrl && (
                          <li>
                            <a class="flex gap-2 hover:bg-primary-100 rounded-full transition-colors p-4 ml-0 lg:-ml-4" href={project.data.link.sourceCodeUrl}>
                              <img
                                class="object-contain"
                                width="20"
                                height="20"
                                src="/assets/global/github.svg"
                                alt="GitHub Logo"
                              />
                              {t('Work-5')}
                            </a>
                          </li>
                        )}
                        {project.data.link.url && (
                          <li>
                            <a class="flex gap-2 hover:bg-primary-100 rounded-full transition-colors p-4 ml-0 lg:-ml-4" href={project.data.link.url}>
                              <img
                                width="20"
                                height="20"
                                src="/assets/global/open-new.svg"
                                alt={t('Work-6')}
                              />
                              {t('Work-7')}
                            </a>
                          </li>
                        )}
                      </ul>
                    )}
                  </div>
                </li>
              );
            })
          }
        </ul>
      </section>
    </main>
  </div>
</Base>
